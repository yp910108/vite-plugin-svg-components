import type { Icon } from './typing'

const camelizeRE = /-(\w)/g
export function camelize(str: string) {
  str = str.replace(camelizeRE, (_, c) => (c ? c.toUpperCase() : ''))
  str = `${str.slice(0, 1).toUpperCase()}${str.slice(1)}`
  return str
}

export function generateComponentStr(
  prefix: string,
  key: string,
  icon: Icon,
  width?: number,
  height?: number
) {
  const svgLeft = icon.left ?? 0
  const svgTop = icon.top ?? 0
  const svgWidth = icon.width ?? width ?? 0
  const svgHeight = icon.height ?? height ?? 0
  const name = camelize(`${prefix}-${key}`)
  return `/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by vite-plugin-icon
import { defineComponent } from 'vue'

export default defineComponent({
  name: '${name}',
  render() {
    return (
      <svg viewBox="${svgLeft} ${svgTop} ${svgWidth} ${svgHeight}" width="1em" height="1em">
        ${icon.body}
      </svg>
    )
  }
})
`
}

export function generateImportStr(prefix: string, key: string) {
  const name = camelize(`${prefix}-${key}`)
  return `export { default as ${name} } from './components/${prefix}-${key}'\n`
}

export function generateComponentNameTypeStr(prefix: string, key: string) {
  const name = camelize(`${prefix}-${key}`)
  return `\t\t| '${name}'\n`
}

export function generateNameTypeStr(key: string) {
  return `\t\t| '${key}'\n`
}

export function generateTypeStrs(componentNameTypeStrs: string, nameTypeStrs: string) {
  return `/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by vite-plugin-icon
declare namespace Icon {
  // the component name
  type IconComponentName =
${componentNameTypeStrs}
  // the name of svg file
  type IconName =
${nameTypeStrs}}
`
}
